#!wing
#!version=5.0
##################################################################
# Wing IDE project file : User-specific branch                   #
##################################################################
[user attributes]
debug.breakpoints = {loc('py_matplotlib_basics.py'): {6: (0,
        None,
        1,
        0)},
                     loc('py_matplotlib_line.py'): {8: (0,
        None,
        1,
        0)},
                     loc('py_matplotlib_subplots.py'): {8: (0,
        None,
        1,
        0)},
                     loc('py_numpy_descriptives.py'): {32: (0,
        None,
        1,
        0),
        51: (0,
             None,
             1,
             0)},
                     loc('py_pandas_date_wrangling.py'): {14: (0,
        None,
        1,
        0),
        48: (0,
             None,
             1,
             0),
        107: (0,
              None,
              1,
              0)},
                     loc('py_pandas_plot.py'): {7: (0,
        None,
        1,
        0)},
                     loc('py_pandas_series_1.py'): {28: (0,
        None,
        1,
        0),
        29: (0,
             None,
             1,
             0),
        33: (0,
             None,
             1,
             0),
        55: (0,
             None,
             1,
             0)},
                     loc('py_pandas_time_series_introspect.py'): {24: (0,
        None,
        1,
        0),
        38: (0,
             None,
             1,
             0)},
                     loc('py_seaborn_regression.py'): {10: (0,
        None,
        1,
        0),
        26: (0,
             None,
             1,
             0)},
                     loc('solution_dsci_chapter_01.py'): {24: (0,
        None,
        1,
        0)},
                     loc('solution_dsci_chapter_01_numpy.py'): {59: (0,
        None,
        1,
        0),
        76: (0,
             None,
             1,
             0)},
                     loc('solution_dsci_chapter_01_python_review.py'): {25: (0,
        None,
        1,
        0)},
                     loc('solution_dsci_chapter_02_diabetes.py'): {19: (0,
        None,
        1,
        0),
        20: (0,
             None,
             1,
             0),
        23: (0,
             None,
             1,
             0),
        32: (0,
             None,
             1,
             0)},
                     loc('solution_dsci_chapter_02_physiology.py'): {32: (0,
        None,
        1,
        0)},
                     loc('solution_dsci_chapter_03_baseball.py'): {18: (0,
        None,
        1,
        0),
        28: (0,
             None,
             1,
             0)},
                     loc('test.py'): {104: (0,
        None,
        1,
        0),
                                      114: (0,
        None,
        1,
        0),
                                      136: (0,
        None,
        1,
        0),
                                      162: (0,
        None,
        1,
        0),
                                      184: (0,
        None,
        1,
        0)}}
debug.err-values = {loc('solution_dsci_chapter_01_numpy.py'): {},
                    loc('solution_dsci_chapter_02_series.py'): {}}
debug.show-args-dialog = {loc('py_annotations.py'): False,
                          loc('py_matplotlib_bar.py'): False,
                          loc('py_matplotlib_basics.py'): False,
                          loc('py_matplotlib_line.py'): False,
                          loc('py_matplotlib_subplots.py'): False,
                          loc('py_numpy_descriptives.py'): False,
                          loc('py_pandas_date_wrangling.py'): False,
                          loc('py_pandas_plot.py'): False,
                          loc('py_pandas_series_1.py'): False,
                          loc('py_pandas_time_series_introspect.py'): False,
                          loc('py_seaborn_regression.py'): False,
                          loc('py_time_series_basic.py'): False,
                          loc('solution_dsci_chapter_01.py'): False,
                          loc('solution_dsci_chapter_01_numpy.py'): False,
                          loc('solution_dsci_chapter_02_diabetes.py'): False,
                          loc('solution_dsci_chapter_02_series.py'): False,
                          loc('solution_dsci_chapter_03_baseball.py'): False,
                          loc('test.py'): False,
                          loc('test1.py'): False,
                          loc('unknown:<untitled> #1'): False}
debug.var-col-widths = [0.398406374501992,
                        0.601593625498008]
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': 'DTKOdTFBsINdIy5ZPotHInUeya'\
        'LmovpU',
        'size-state': '',
        'type': 'dock',
        'view': {'area': 'tall',
                 'constraint': None,
                 'current_pages': [0,
                                   0],
                 'full-screen': False,
                 'notebook_display': 'normal',
                 'notebook_percent': 0.2540237928621414,
                 'override_title': None,
                 'pagelist': [('project',
                               'tall',
                               0,
                               {'tree-state': {'file-sort-method': 'by name',
        'list-files-first': False,
        'tree-states': {'deep': {'expanded-nodes': [],
                                 'selected-nodes': [],
                                 'top-node': ()}},
        'tree-style': 'deep'}}),
                              ('browser',
                               'tall',
                               0,
                               {'all_tree_states': {u'By Module': {'expanded'\
        '-nodes': [],
        'selected-nodes': [],
        'top-node': None}},
                                'browse_mode': u'By Module',
                                'follow-selection': False,
                                'sort_mode': 'Alphabetically',
                                'visibility_options': {u'Derived Classes': False,
        u'Imported': False,
        u'Modules': True}}),
                              ('snippets',
                               'tall',
                               0,
                               {'tree-states': {'__all__': [],
        u'c': [],
        u'django': [],
        u'html': [],
        u'py': []}}),
                              ('source-assistant',
                               'tall',
                               2,
                               {}),
                              ('debug-stack',
                               'tall',
                               1,
                               {}),
                              ('indent',
                               'tall',
                               2,
                               {}),
                              ('open-files',
                               'tall',
                               1,
                               {'tree-state': []})],
                 'primary_view_state': {'area': 'wide',
        'constraint': None,
        'current_pages': [1,
                          4],
        'notebook_display': 'normal',
        'notebook_percent': 0.5714285714285714,
        'override_title': None,
        'pagelist': [('batch-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': u'All Source Files',
                                  'fLocation': '.',
                                  'fRecursive': True,
                                  'fType': 'location'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': '',
                                       'fReverse': False,
                                       'fSearchText': u'ser[1]',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('interactive-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': u'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': u'"',
                                       'fReverse': False,
                                       'fSearchText': u'\u2019',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': True},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('debug-data',
                      'wide',
                      0,
                      {}),
                     ('debug-exceptions',
                      'wide',
                      0,
                      {}),
                     ('debug-breakpoints',
                      'wide',
                      0,
                      {}),
                     ('debug-stack',
                      'wide',
                      0,
                      {'codeline-mode': 'below'}),
                     ('debug-io',
                      'wide',
                      1,
                      {'attrib-starts': [],
                       'first-line': 0,
                       'folded-linenos': [],
                       'sel-line': 3,
                       'sel-line-start': 72,
                       'selection_end': 72,
                       'selection_start': 72}),
                     ('debug-probe',
                      'wide',
                      2,
                      {'attrib-starts': [],
                       'first-line': 0,
                       'folded-linenos': [],
                       'history': {u'file:C:/Users/pbarton/Desktop/py_pandas_date_wrangling.py': [""\
        "rpoll['average']=rpoll['spread'].rolling(3, min_periods).mean()\n",
        "rpoll['average']=rpoll['spread'].rolling(3).mean()\n",
        "df = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]})\n",
        "df.rolling(2, win_type='triang').sum()\n",
        'df.rolling(2).sum()\n',
        "df = pd.DataFrame({'B': [i for i in range(10)]})\n",
        'df.rolling(2).mean()\n',
        'df.rolling(4).mean()\n',
        "rpoll['spread'].rolling(21)\n",
        "rpoll['spread'].rolling(21).mean()\n",
        'rpoll.dropna()\n',
        'rpoll\n',
        'df.columns\n',
        "df['place']=df['place'].split(',')[1]\n",
        "df['place']=df['place'].values().split(',')[1]\n",
        "df['place'].values()\n",
        "df['place'].values\n",
        "df['place'].values[0]\n",
        "df['place'].values[0].split(',')\n",
        "df['place'].values[0].split(',')[1]\n",
        "df['place'].values[0].split(',')[1].trim()\n",
        "df['place'].values[0].split(',')[1].strip()\n",
        "df['place']=df['place'].values.split(',')[1].trim()\n",
        "df['place']=df['place'].str.split(',')[1].str.trim()\n",
        "df['place']=df['place'].str.split(',')[1].trim()\n",
        "df['place']=df['place'].str.split(',')[1]\n",
        "df['place'].str.split(',')\n",
        "df['place'].str.split(',')[1]\n",
        "df['locale']=df['place'].str.split(',')\n\n",
        "df['locale']=df['locale'][1].str.strip()\n",
        "df['locale']=df['locale'][1]\n",
        "df['locale']=df['place'].str.split(',').str.get(1)\n",
        "df['locale']\n",
        "df['locale'].unique()\n",
        "df['place']=df['place'].str.split(',').str.get(1)\n",
        "df['place']=df['place'].str.split(',').str.get(1).strip()\n",
        "df['place']=df['place'].str.strip().split(',').str.get(1).strip()\n",
        "df['place']=df['place'].split(',').str.get(1).strip()\n",
        "df['place']=df['place'].split(',').str.get(1)\n",
        "f['place']=df['place'].str.strip()\n",
        "df['place']=df['place'].str.strip()\n",
        "df['place']=df['place'].str.replace(\"CA\", \"California\")\n",
        'df.head()\n',
        'df.drop(df.columns[[5,6,7,8,9,11,12,14,15,16,17,18,20,21]], axis=1)'\
        '\n',
        'df.iloc[0:3]\n',
        'df[0]\n',
        "df.['time']=df['time'].dt.strftime(\"Y-%m-%d\")\n",
        "df['time']=df['time'].dt.strftime(\"Y-%m-%d\")\n",
        "df['time']=df['time'].dt.strftime(\"%Y-%m-%d\")\n",
        "df.iloc[0]['time']\n",
        "df['year']=df['time'].year\n",
        "df['year']=df['time'].dt.year()\n",
        "df['year']=df['time'].dt.year\n",
        "df['year']=df['time'].dt.month\n",
        'df.iloc[0]\n',
        "pt=pd.pivot_table(df, index=['place', 'year', 'month', 'status'])\n",
        "pt=pd.pivot_table(df, index=['place', 'year', 'mon', 'status'])\n",
        "pt=pd.pivot_table(df, index=['place', 'year', 'month'])\n",
        "pt=pd.pivot_table(df, index=['place', 'year', 'mon'])\n",
        'pt[:10]\n',
        'pd.set_option(max_columns=10)\n',
        'pd.set_option("max_columns"=10)\n',
        'pd.set_options(max_columns=10)\n',
        'pd.set_option(display.width=100)\n',
        'pd.set_option[display.width=100]\n',
        'pd.set_option[display.width, 100]\n',
        'pd.display\n',
        'pd.option\n',
        'pd.options\n',
        'pd.set_option("display_width", 100)\n',
        'pd.set_option("display.width", 100)\n',
        'pt\n',
        "pt=pd.pivot_table(df, index=['mon', 'place', 'year'])\n",
        "pt=pd.pivot_table(df, index=['place'], values=['mag'], aggfunc=np.m"\
        "ean)\n",
        'pt[:5]\n',
        "df.query('place==\"Alaska\"')\n",
        "pt.query(\"place=='Alaska'\")\n",
        "df['strength']=if df['mag']>4 \"major\" else \"minor\"\n",
        "df['strength']=np.nan\n",
        " df['mag']>4 df['strength']=\"major\" else df['strength']=\"minor\""\
        "\n",
        " if df['strength']=\"major\" else df['strength']=\"minor\"\n",
        " if df['mag']>4 df['strength']=\"major\" else df['strength']=\"mino"\
        "r\"\n",
        " if df['mag']>4: df['strength']=\"major\" else: df['strength']=\"mi"\
        "nor\"\n",
        'cut_offs=[2,4,6,8]\n',
        "names=['weak', 'moderate', 'strong', 'intense']\n",
        'cut_offs=[2,4,6,8, 10]\n',
        "df['strength']=pd.cut(df['mag'], cut_offs, labels=names)\n",
        'df[:4]\n',
        'ef\n',
        'pd.concat([df, ef])\n',
        'cf=pd.concat([df, ef])\n',
        'cf[0]\n',
        'cf[0][0]\n',
        'df=pd.DataFrame([[11,12,13],[21,22,23],[31,32,33]], index=common_in'\
        'dex, columns=common_index)\n',
        'df\n',
        'concat\n',
        'concat.reindex_axis()\n',
        'concat.reset_index()\n',
        'df.sort()\n',
        'type(df)\n'],
                                   u'file:C:/Users/pbarton/Desktop/solution_dsci_chapter_01.py': [''\
        'self.members\n'],
                                   u'file:C:/Users/pbarton/Desktop/solution_dsci_chapter_01_numpy.py': [''\
        '(el + 1) * 100 + (r + 1) * 10 + (c + 1)\n',
        'arr[0]\n',
        'arr[1, 1:3, 1:3]\n',
        'arr[:, 2, :]\n',
        '\narr[3:, 2, :]\n',
        '\narr[3, 2, :]\n\n',
        '\narr[2, 2, :]\n\n',
        'arr[:, 1, 2:3]\n',
        'arr[:, 1, 2:4]\n',
        'arr[:, 1, 1:3]\n'],
                                   u'file:C:/Users/pbarton/Desktop/solution_dsci_chapter_02_diabetes.py': [''\
        'bunch\n',
        "bunch['data']\n",
        "type(bunch['data'])\n",
        "data = bunch['data']\n",
        'data[1]\n',
        'target[0]\n',
        'data\n',
        'everything\n',
        "everything['DESCR']\n",
        'import pandas as pd\n',
        'ser=pd.Series()\n',
        'everything.keys()\n',
        'eser+pser\n',
        'for c in pser.columns:\n\teser[c]=pser[c]\n\n',
        'for c in pser.columns:\n\teser.assign(c=pser[c])\n\n',
        "eser.assign(eindex=eser['Chins'] * 3 + \n                   eser[\""\
        "Situps\"] * 2 + \n                   eser[\"Jumps\"])\n\n",
        'eser\n',
        'pser[:4]\n',
        'pser[c]\n',
        'eser.assign(c=pser[c], inplace=True)\n',
        'eser= eser.assign(c=pser[c])\n',
        'eser[:4]\n'],
                                   u'file:C:/Users/pbarton/Desktop/solution_dsci_chapter_02_physiology.py': [''\
        'eser+pser\n',
        "eser['Weight']  = pser['Weight']\neser['Waist']   = pser['Waist']\n"\
        "eser['Pulse\"']  = pser['Pulse']\n\n",
        'eser\n',
        'everything["DESCR"]\n',
        'everything.keys()\n',
        "type(everything['data'])\n"],
                                   u'file:C:/Users/pbarton/Desktop/solution_dsci_chapter_02_series.py': [''\
        'pdf\n',
        'pdf()\n',
        'help(pdf)\n',
        'heko stats.norm.cdf\n',
        'help stats.norm.cdf\n',
        'help (stats.norm.cdf)\n',
        'st\n',
        "thing.split(',')\n",
        'year\n',
        'print(year)\n',
        'print(obs)\n',
        'ser=pd.series(data, index)\n',
        'ser=pd.Series(data, index)\n',
        'ser\n',
        "ser.loc('-99.99')\n",
        'ser.loc(99)\n',
        'ser.get_loc(99)\n',
        'ser[999]\n',
        'ser.loc[999]\n',
        'ser.find(-99)\n',
        'ser.isin(-99)\n',
        'ser.isin([-99])\n',
        'ser=pd.Series(ppm, index)\n',
        'ser.replace(-99, nan)\n',
        'len(first_10_mean)\n',
        'ser[:10]\n',
        'len(ser[:10])\n',
        'len(ser[-10:])\n',
        'print(ser)\n',
        'plt.show()\n',
        'ser.values\n',
        'ser.index\n',
        'ser.index.tolist()\n'],
                                   u'file:C:/Users/pbarton/Desktop/solution_dsci_chapter_03_baseball.py': [''\
        'os\n',
        'import os\n',
        'os.getcwd\n',
        'os.getcwd()\n',
        'df=pd.read_excel(fn, parse_cols=[1,3,5])\n',
        'df=pd.read_excel(fn, parse_cols=[1:3,3, 2:4])\n',
        'df=pd.read_excel(fn, parse_cols=[1:3 ])\n',
        'df=pd.read_excel(fn, parse_cols=[1, 2, 3, 4, 6] ])\n',
        'df=pd.read_excel(fn, parse_cols=[1, 2, 3, 4, 6] )\n',
        'df=pd.read_excel(fn, parse_cols=[1:3, 4])\n',
        "df.loc['name']\n",
        "df.loc[:,'name']\n",
        'df.columns()\n',
        'df.reindex()\n',
        'df=pd.read_excel(fn, parse_cols="A:M")\n',
        'df\n',
        "df['name']\n",
        "df['bb_per_K'].hist()\n",
        'df.index\n',
        "df['bb_per_K']\n",
        "df['bb_per_K'].columns\n",
        'df.columns\n',
        'df.mean\n',
        'df.mean()\n',
        "ser=df['bb_pct']\n",
        'ser.mean\n',
        'ser.mean()\n',
        'ser.std()\n',
        'ser.sample(10)\n',
        'import scipy\n',
        'from scipy import stats\n',
        's = pd.Series(np.random.normal(size=n))\n',
        's = pd.Series(np.random.normal(size=3))\n',
        's\n',
        '_, p = stats.normaltest(np.random.normal(size=n))\n',
        '_, p = stats.normaltest(np.random.normal(size=10))\n',
        'np.random.normal(size=10)\n',
        'stats.normaltest(np.random.normal(size=10))\n',
        'a,b=stats.normaltest(np.random.normal(size=10))\n',
        'for n in [x for x in range(0, 100, 10)]:\n    #s = pd.Series(np.ran'\
        'dom.normal(size=n))\n    _, p = stats.normaltest(np.random.normal(s'\
        'ize=n))\n    print(fmt.format(str(round(n)), str(round(p))))\n\n',
        'for n in [x for x in range(0, 100, 10)]:\n    #s = pd.Series(np.ran'\
        'dom.normal(size=n))\n    _, p = stats.normaltest(np.random.normal(s'\
        'ize=n))\n    print(fmt.format(str(round(n)), str(round(p))))\nstats'\
        '.normaltest(np.random.normal(size=n))\n\n',
        'stats.normaltest(np.random.normal(size=n))\n',
        'stats.normaltest(np.random.normal(size=100))\n',
        "ax[0,0].scatter(df['bb']/df['at_bat'], df['avg'])\n",
        'a=ax[0,0]\n',
        'a.xaxis.set_ticks(ticks)\n',
        'plt.yticks(ticks)\n',
        'plt.show()\n',
        'plt.xticks(ticks)\n',
        'plt.xticks\n',
        'plt.xticks()_\n',
        'plt.xticks()\n',
        'plt.axes\n',
        'plt.axes()\n',
        'plt.plot\n',
        'plt.subplots[0,0]\n',
        'plt.figure[0]\n',
        'plt.figure()\n',
        'f=plt.figure()\n',
        'f.get_axes\n',
        'f.get_axes()\n',
        'a.yaxis.set_ticks(ticks)\n',
        'a[0,0]\n',
        'a.boxplot()\n',
        'a.scatter([1,2,34], [2,4,6])\n',
        'a.set_ylabel\n',
        "a.set_ylabel('asfd')\n",
        'fig\n',
        'a.remove()\n',
        'a\n',
        'a.get_children()\n',
        'ch=a.get_children()\n',
        'ch[0].remove()\n',
        'import matplotlib as mp\n',
        'mp.rcParams\n',
        "'pines' in mp.rcParams \n",
        'import numpy as np\n'],
                                   u'file:C:/Users/pbarton/Desktop/test.py': [''\
        'df=df.drop_duplicates()\n',
        "newix=pd.date_range(min(df['time']), max(df['time']), freq='min')\n",
        "df['newix']=newix\n",
        'nix=pd.DataFrame(newix)\n',
        'df.merge(nix)\n',
        'df.join(nix)\n',
        "df.join(nix, how='outer')\n",
        'df.dtypes\n',
        "df.join(nix, how='outer', axis=1)\n",
        'df.merge(nix,  axis=1)\n',
        'df.concat(nix,  axis=1)\n',
        'pd.concat(df,nix,  axis=1)\n',
        'pd.concat((df,nix),  axis=1)\n',
        'df\n',
        'df[0]\n',
        'df.head(1)\n',
        'x=pd.concat((df,nix),  axis=1)\n',
        'x\n',
        'head(x)\n',
        'x.head()\n',
        'newix.head()\n',
        'newix.head\n',
        'type(df.index)\n',
        'len(df)\n',
        "df.set_index('newix')\n",
        "df.reindex('newix')\n",
        'type(newix)\n',
        'index_like\n',
        'df.index\n',
        'type(data)\n',
        "lass 'str'>\n\n",
        'df.reindex(newix)\n',
        'newix\n',
        'len(newix)\n',
        'type(ok)\n',
        's=pd.Series()\n',
        'type(s)\n',
        'isinstance(s, pd.Series)\n',
        's1=pd.Series(s1)\n',
        'type(s1)\n',
        'idx\n',
        's1\n',
        's2\n',
        'len(s1)\n',
        'len(s2)\n',
        'si.index\n',
        's1.index\n',
        's1.index.min\n',
        's1.index.min()\n',
        'min(s1.index)\n',
        'max(s1.index)\n',
        'nbars\n',
        'len(width)\n',
        'len(height)\n',
        'lwargs\n',
        'kwargs\n',
        "kwargs['freq']\n",
        'left\n',
        'len(left)\n',
        'len(y_locations)\n',
        'kwargs.keys9)\n',
        'kwargs.keys()\n',
        "freq=kwargs.get('freq', 'd')\n",
        'freq\n',
        'idx=pd.date_range(min(s1.index), max(s1.index), freq=freq)\n',
        'len(idx)\n',
        'ok.index[0:9]\n',
        'ok.index[start: start+window]\n',
        'ok.index.days\n',
        'ok.index.day\n',
        'ok.index[0].day\n',
        'ok.index[0].days\n',
        'dates.date2num(ok.index[start: start+window])\n',
        'x=ok[:10]\n',
        'x.index\n',
        'x.index.to_pydatetime()\n',
        'y=x.index.to_pydatetime()\n',
        'dates.date2num(y)\n',
        'ok[1]\n',
        'ok.loc[1]\n',
        'ok.iloc[1]\n',
        'fig.show()\n',
        'ok\n',
        'ok.index\n',
        'ax.yaxis_date\n',
        'ax.yaxis_date()\n',
        'ax.add_table()\n',
        "ok['depth']\n",
        "a=ok['depth']\n",
        'a.mean()\n',
        'ok_plot=ok[field][start: start+window]\n',
        "window=100\n#window=len(ok)\nstart=0\nfield='depth'\n\nok_plot=ok[f"\
        "ield][start: start+window]\n\n",
        'ok_plot.shape\n',
        'x_as_datetime=ok.index[start: start+window].to_pydatetime()\nx_as_f'\
        'loats=dates.date2num(x_as_datetime)\nx_plot=y_as_floats\n\n',
        'ok_plot==cal_plot\n',
        'ok_plot\n',
        'for i in ok_plot:\n    print(i)\n\n',
        'ok_plot.any()\n',
        'cal_plot.any()\n',
        'cal.any()\n'],
                                   u'file:C:/Users/pbarton/Desktop/test1.py': [''\
        'vertical.reindex([1,2,3,4], allow_dups=True)\n',
        'vertical.index\n',
        'v=vertical.index\n',
        'v.unique()\n',
        'v.reindex(v.unique())\n',
        'v.reindex(v.unique(), inplace=True)\n',
        'v=v.reindex(v.unique())\n',
        'v\n',
        "vertical.drop_duplicates(keep='last')\n",
        "vertical.drop_duplicates(keep='last', inplace=True)\n",
        "vertical=vertical.drop_duplicates(keep='last', inplace=True)\n",
        'vert\n',
        'vet\n',
        "vertical=vertical.drop_duplicates(keep='last')\n",
        "vertical=vertical.drop_duplicates('c1','keep='last')\n",
        "vertical=vertical.drop_duplicates('c1',keep='last')\n",
        'vertical.reset_index()\n',
        'vertical\n',
        'v=vertical.reindex([1,2,3,4])\n',
        'vertical=vertical.reset_index()\n',
        'vertical.reindex([1,2,3,4])\n']},
                       'launch-id': None,
                       'sel-line': 0,
                       'sel-line-start': 0,
                       'selection_end': 14,
                       'selection_start': 3}),
                     ('debug-watch',
                      'wide',
                      1,
                      {'node-states': [('eval',
        u'i'),
                                       ('eval',
        u'i>3')],
                       'tree-state': {'expanded-nodes': [],
                                      'selected-nodes': [(1,)],
                                      'top-node': (0,)}}),
                     ('debug-modules',
                      'wide',
                      1,
                      {}),
                     ('python-shell',
                      'wide',
                      2,
                      {'attrib-starts': [],
                       'first-line': 257,
                       'folded-linenos': [],
                       'history': {None: ['py_misc_strings.py\nmy_team="The '\
        'Chicago Cubs"\n\nsplit_team=my_team.split(" ")\nprint("splits:  {}\xe2'\
        '\x80\x9d.format(split_team))\n\njoin_string="!!!"\ntogether_again=j'\
        'oin_string.join(split_team)\nprint("together again: {}.\xe2\x80\x9d'\
        ' \\\n      .format( together_again), end=join_string+"\\n")\n\n#res'\
        'ults:\nsplits:  [\xe2\x80\x98The\xe2\x80\x99, \xe2\x80\x98Chicago\xe2'\
        '\x80\x99, \xe2\x80\x98Cubs\xe2\x80\x99]\ntogether again: a!!!b!!!c!'\
        '!!\n\n',
        "{}['x]\n",
        "{}['x']\n",
        'a=set(1)\n',
        'a=set([1])\n',
        'b=set([3])\n',
        'c=set([4])\n',
        'a|b|c\n',
        'a&b&c\n',
        'import os\n',
        'dir(os)\n',
        "m=os.meta('test1.py')\n",
        "m=os.stat('test1.py')\n",
        'os.listdir()\n',
        "m=os.stat('tools')\n",
        "m['st_uid']\n",
        'm.st_atime\n',
        'del m\n',
        "if m:\n  print('hey')\n\n"]},
                       'launch-id': None,
                       'sel-line': 277,
                       'sel-line-start': 5791,
                       'selection_end': 5791,
                       'selection_start': 5791}),
                     ('bookmarks',
                      'wide',
                      1,
                      {}),
                     ('messages',
                      'wide',
                      2,
                      {'current-domain': 0}),
                     ('os-command',
                      'wide',
                      1,
                      {'last-percent': 0.8,
                       'toolbox-percent': 1.0,
                       'toolbox-tree-sel': 'cmd-awS9h5ArYqEfBhRE'})],
        'primary_view_state': {'editor_states': ({'bookmarks': ([(loc('test.py'),
        {'attrib-starts': [],
         'first-line': 63,
         'folded-linenos': [],
         'sel-line': 65,
         'sel-line-start': 1877,
         'selection_end': 1886,
         'selection_start': 1886},
        1506626728.604),
        (loc('test.py'),
         {'attrib-starts': [],
          'first-line': 91,
          'folded-linenos': [],
          'sel-line': 105,
          'sel-line-start': 2960,
          'selection_end': 2960,
          'selection_start': 2960},
         1506626915.659),
        (loc('test.py'),
         {'attrib-starts': [],
          'first-line': 71,
          'folded-linenos': [],
          'sel-line': 73,
          'sel-line-start': 2169,
          'selection_end': 2169,
          'selection_start': 2169},
         1506629691.883),
        (loc('test.py'),
         {'attrib-starts': [],
          'first-line': 66,
          'folded-linenos': [],
          'sel-line': 75,
          'sel-line-start': 2176,
          'selection_end': 2176,
          'selection_start': 2176},
         1506629708.034),
        (loc('test.py'),
         {'attrib-starts': [],
          'first-line': 84,
          'folded-linenos': [],
          'sel-line': 86,
          'sel-line-start': 2498,
          'selection_end': 2498,
          'selection_start': 2498},
         1506629710.208),
        (loc('test.py'),
         {'attrib-starts': [],
          'first-line': 3,
          'folded-linenos': [],
          'sel-line': 14,
          'sel-line-start': 421,
          'selection_end': 431,
          'selection_start': 424},
         1506629717.052),
        (loc('unknown:<untitled> #2'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 0,
          'sel-line-start': 0,
          'selection_end': 0,
          'selection_start': 0},
         1506713474.361),
        [loc('../AppData/Local/Continuum/Anaconda3/envs/py34/Lib/site-packages/matplotlib/pyplot.py'),
         {'attrib-starts': [('bar',
                             2691)],
          'first-line': 2692,
          'folded-linenos': [],
          'sel-line': 2706,
          'sel-line-start': 86945,
          'selection_end': 86945,
          'selection_start': 86945},
         1506713474.469],
        [loc('iris_data.csv'),
         {'attrib-starts': [],
          'first-line': 138,
          'folded-linenos': [],
          'sel-line': 151,
          'sel-line-start': 4738,
          'selection_end': 4738,
          'selection_start': 4738},
         1506713489.314],
        (loc('iris.data.csv'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 151,
          'sel-line-start': 4738,
          'selection_end': 4738,
          'selection_start': 4738},
         1506713523.427),
        [loc('unknown:<untitled> #3'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 0,
          'sel-line-start': 0,
          'selection_end': 0,
          'selection_start': 0},
         1506875112.047],
        (loc('py_annotations.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 6,
          'sel-line-start': 105,
          'selection_end': 121,
          'selection_start': 121},
         1506875123.976),
        (loc('test1.py'),
         {'attrib-starts': [],
          'first-line': 8,
          'folded-linenos': [],
          'sel-line': 18,
          'sel-line-start': 495,
          'selection_end': 522,
          'selection_start': 495},
         1508260951.257),
        (loc('test1.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 11,
          'sel-line-start': 267,
          'selection_end': 301,
          'selection_start': 301},
         1508260952.791),
        (loc('test1.py'),
         {'attrib-starts': [],
          'first-line': 4,
          'folded-linenos': [],
          'sel-line': 12,
          'sel-line-start': 305,
          'selection_end': 334,
          'selection_start': 334},
         1508261032.377),
        (loc('test1.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 4,
          'sel-line-start': 129,
          'selection_end': 142,
          'selection_start': 139},
         1508262941.755),
        (loc('test1.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 0,
          'sel-line-start': 0,
          'selection_end': 0,
          'selection_start': 0},
         1508262951.468),
        (loc('test1.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 1,
          'sel-line-start': 20,
          'selection_end': 37,
          'selection_start': 34},
         1508262958.273),
        (loc('test1.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 0,
          'sel-line-start': 0,
          'selection_end': 0,
          'selection_start': 0},
         1508262969.386),
        [loc('test1.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 0,
          'sel-line-start': 0,
          'selection_end': 0,
          'selection_start': 0},
         1508262971.564]],
        19),
        'current-loc': loc('test1.py'),
        'editor-state-list': [(loc('clean_polling_data.csv'),
                               {'attrib-starts': [],
                                'first-line': 0,
                                'folded-linenos': [],
                                'sel-line': 0,
                                'sel-line-start': 0,
                                'selection_end': 0,
                                'selection_start': 0}),
                              (loc('iris.data.csv'),
                               {'attrib-starts': [],
                                'first-line': 0,
                                'folded-linenos': [],
                                'sel-line': 151,
                                'sel-line-start': 4738,
                                'selection_end': 4738,
                                'selection_start': 4738}),
                              (loc('py_annotations.py'),
                               {'attrib-starts': [],
                                'first-line': 0,
                                'folded-linenos': [],
                                'sel-line': 6,
                                'sel-line-start': 105,
                                'selection_end': 121,
                                'selection_start': 121}),
                              (loc('py_matplotlib_subplots.py'),
                               {'attrib-starts': [],
                                'first-line': 0,
                                'folded-linenos': [],
                                'sel-line': 8,
                                'sel-line-start': 240,
                                'selection_end': 266,
                                'selection_start': 266}),
                              (loc('py_pandas_dataframe_intro.py'),
                               {'attrib-starts': [],
                                'first-line': 78,
                                'folded-linenos': [],
                                'sel-line': 90,
                                'sel-line-start': 2136,
                                'selection_end': 2143,
                                'selection_start': 2143}),
                              (loc('py_plotting_utils.py'),
                               {'attrib-starts': [('printme',
        16)],
                                'first-line': 0,
                                'folded-linenos': [],
                                'sel-line': 16,
                                'sel-line-start': 456,
                                'selection_end': 475,
                                'selection_start': 475}),
                              (loc('test1.py'),
                               {'attrib-starts': [],
                                'first-line': 0,
                                'folded-linenos': [],
                                'sel-line': 9,
                                'sel-line-start': 239,
                                'selection_end': 262,
                                'selection_start': 262}),
                              (loc('test.py'),
                               {'attrib-starts': [],
                                'first-line': 3,
                                'folded-linenos': [],
                                'sel-line': 14,
                                'sel-line-start': 421,
                                'selection_end': 431,
                                'selection_start': 424})],
        'has-focus': True,
        'locked': False},
        [loc('clean_polling_data.csv'),
         loc('iris.data.csv'),
         loc('py_annotations.py'),
         loc('py_matplotlib_subplots.py'),
         loc('py_pandas_dataframe_intro.py'),
         loc('py_plotting_utils.py'),
         loc('test1.py'),
         loc('test.py')]),
                               'open_files': [u'clean_polling_data.csv',
        u'iris.data.csv',
        u'py_matplotlib_subplots.py',
        u'py_pandas_dataframe_intro.py',
        u'py_plotting_utils.py',
        u'test.py',
        u'py_annotations.py',
        u'test1.py']},
        'saved_notebook_display': None,
        'split_percents': {0: 0.42995169082125606},
        'splits': 2,
        'tab_location': 'top',
        'user_data': {}},
                 'saved_notebook_display': None,
                 'split_percents': {0: 0.5},
                 'splits': 2,
                 'tab_location': 'left',
                 'user_data': {}},
        'window-alloc': (208,
                         45,
                         1435,
                         962)}]}
guimgr.recent-documents = [loc('test1.py'),
                           loc('py_annotations.py'),
                           loc('test.py'),
                           loc('py_plotting_utils.py'),
                           loc('py_matplotlib_subplots.py'),
                           loc('py_pandas_dataframe_intro.py'),
                           loc('clean_polling_data.csv')]
proj.build-cmd = {None: ('default',
                         None)}
proj.env-vars = {None: ('default',
                        [u''])}
proj.initial-dir = {None: ('custom',
                           u'c:\\Users\\pbarton\\AppData\\Local\\Continuum\\Anaconda3\\envs\\py35')}
proj.pyexec = {None: ('custom',
                      u'c:\\Users\\pbarton\\AppData\\Local\\Continuum\\Anaconda3\\envs\\py34\\python.exe')}
search.search-history = [u'ser[1]',
                         u'ser',
                         u'py_pandas_series_1.py',
                         u'py_pandas_series_1',
                         u'py_pandas',
                         u'py_',
                         u'py',
                         u'datetime']
search.search-scope-history = [loc('.')]
